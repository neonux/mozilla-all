/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Plugins.
 *
 * The Initial Developer of the Original Code is
 *   Chris Jones <jones.chris.g@gmail.com>.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Benjamin Smedberg <benjamin@smedbergs.us>
 *   Ben Turner <bent.mozilla@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

include protocol "PPluginModule.ipdl";
include protocol "PPluginScriptableObject.ipdl";
include protocol "PBrowserStream.ipdl";
include protocol "PStreamNotify.ipdl";

include "mozilla/plugins/PluginMessageUtils.h";

using NPError;
using NPWindow;
using NPReason;


// FIXME/bent: demo purposes only
using mozilla::void_t;
using mozilla::null_t;


namespace mozilla {
namespace plugins {



// FIXME/bent: demo purposes only
union Variant {
  int;
  double;
  void_t;
  null_t;
  PPluginInstance;
};




rpc protocol PPluginInstance
{
  manager PPluginModule;

  manages PPluginScriptableObject;
  manages PBrowserStream;
  manages PStreamNotify;



  // FIXME/bent: demo purposes only
child:
  Test(Variant v1, Variant v2);




child:
  /* NPP_NewStream */
  rpc PBrowserStream(nsCString url,
                     uint32_t length,
                     uint32_t lastmodified,
                     PStreamNotify notifyData,
                     nsCString headers,
                     nsCString mimeType,
                     bool seekable)
    returns (NPError rv,
             uint16_t stype);

  rpc NPP_SetWindow(NPWindow window)
    returns (NPError rv);
  rpc NPP_GetValue(nsString key)
    returns (nsString value);

parent:
  rpc NPN_GetURL(nsCString url, nsCString target)
    returns (NPError result);
  rpc NPN_PostURL(nsCString url, nsCString target, nsCString buffer, bool file)
    returns (NPError result);

  /**
   * Covers both NPN_GetURLNotify and NPN_PostURLNotify.
   * @TODO This would be more readable as an overloaded method,
   *       but IPDL doesn't allow that for constructors (or any method?).
   */
  rpc PStreamNotify(nsCString url, nsCString target, bool post,
                    nsCString buffer, bool file)
    returns (NPError result);

child:
  /**
   * Represents NPP_URLNotify
   */
  rpc ~PStreamNotify(NPReason reason);

parent:
  rpc PPluginScriptableObject()
    returns (NPError rv);
  rpc ~PPluginScriptableObject()
    returns (NPError rv);

both:
  /**
   * ~BrowserStream is for both NPN_DestroyStream and NPP_DestroyStream.
   * @param artificial True when the stream is closed as a by-product of
   *                        some other call (such as a failure in NPP_Write).
   */
  rpc ~PBrowserStream(NPReason reason,
                      bool artificial);
};

} // namespace plugins
} // namespace mozilla
