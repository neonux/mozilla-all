/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Plugins.
 *
 * The Initial Developer of the Original Code is
 *   Chris Jones <jones.chris.g@gmail.com>.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Benjamin Smedberg <benjamin@smedbergs.us>
 *   Ben Turner <bent.mozilla@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

include protocol "PPluginInstance.ipdl";

include "npapi.h";
include "mozilla/plugins/PluginMessageUtils.h";

using NPError;
using NPNVariable;
using mozilla::ipc::NPRemoteIdentifier;

namespace mozilla {
namespace plugins {

rpc protocol PPluginModule
{
  manages PPluginInstance;

child:
  rpc NP_Initialize()
    returns (NPError rv);

  rpc PPluginInstance(nsCString aMimeType,
                      uint16_t aMode,
                      nsCString[] aNames,
                      nsCString[] aValues)
    returns (NPError rv);

  rpc NP_Shutdown()
    returns (NPError rv);

parent:
  rpc NPN_UserAgent()
    returns (nsCString userAgent);

  sync NPN_GetStringIdentifier(nsCString aString)
    returns (NPRemoteIdentifier aId);
  sync NPN_GetIntIdentifier(int32_t aInt)
    returns (NPRemoteIdentifier aId);

  // for the following two methods, the returned value is valid iff
  // |err == NPERR_NO_ERROR|
  sync NPN_UTF8FromIdentifier(NPRemoteIdentifier aId)
    returns (NPError err, nsCString aString);
  // technically |aInt| is undefined when |aId| is invalid.  but it's
  // nice to let the other side know that |aId| was invalid
  sync NPN_IntFromIdentifier(NPRemoteIdentifier aId)
    returns (NPError err, int32_t aInt);

  sync NPN_IdentifierIsString(NPRemoteIdentifier aId)
    returns (bool aIsString);

  sync NPN_GetStringIdentifiers(nsCString[] aNames)
    returns (NPRemoteIdentifier[] aIds);

  rpc NPN_GetValue_WithBoolReturn(NPNVariable aVariable)
    returns (NPError aError,
             bool aBoolVal);
};

} // namespace plugins
} // namespace mozilla
