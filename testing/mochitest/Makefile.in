#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1998
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@
relativesrcdir  = testing/mochitest

include $(DEPTH)/config/autoconf.mk

DIRS =	MochiKit \
	static \
	tests \
	chrome \
	ssltunnel \
	$(NULL)

include $(topsrcdir)/config/rules.mk

# files that get copied into $objdir/_tests/
_SERV_FILES = 	\
		runtests.py \
		automation.py \
		gen_template.pl \
		server.js \
		harness-a11y.xul \
		harness-overlay.xul \
		harness.xul \
		browser-test-overlay.xul \
		browser-test.js \
		browser-harness.xul \
		redirect-a11y.html \
		redirect.html \
		redirect.js \
		$(topsrcdir)/build/pgo/server-locations.txt \
		$(topsrcdir)/netwerk/test/httpserver/httpd.js \
		mozprefs.js \
		$(NULL)	


_DEST_DIR = $(DEPTH)/_tests/$(relativesrcdir)
_PROFILE_DIR = $(DEPTH)/_profile/pgo
_CERTS_SRC_DIR = $(topsrcdir)/build/pgo/certs

ifeq ($(USE_SHORT_LIBNAME), 1)
PROGRAM = $(MOZ_APP_NAME)$(BIN_SUFFIX)
else
PROGRAM = $(MOZ_APP_NAME)-bin$(BIN_SUFFIX)
endif

ifeq ($(MOZ_BUILD_APP),camino)
browser_path = \"../$(DIST)/Camino.app/Contents/MacOS/Camino\"
else
ifeq ($(OS_ARCH),Darwin)
ifdef MOZ_DEBUG
browser_path = \"../$(DIST)/$(MOZ_APP_DISPLAYNAME)Debug.app/Contents/MacOS/$(PROGRAM)\"
else
browser_path = \"../$(DIST)/$(MOZ_APP_DISPLAYNAME).app/Contents/MacOS/$(PROGRAM)\"
endif
else
browser_path = \"../$(DIST)/bin/$(PROGRAM)\"
endif
endif

# These go in _tests/ so they need to go up an extra path segement
TEST_DRIVER_PPARGS = 	\
			-DBROWSER_PATH=$(browser_path) \
			-DXPC_BIN_PATH=\"$(LIBXUL_DIST)/bin\" \
			-DBIN_SUFFIX=\"$(BIN_SUFFIX)\" \
			-DPROFILE_DIR=\"../$(_PROFILE_DIR)\" \
			-DCERTS_SRC_DIR=\"$(_CERTS_SRC_DIR)\" \
			$(NULL)

ifeq ($(OS_ARCH),Darwin)
TEST_DRIVER_PPARGS += -DIS_MAC=1
else
TEST_DRIVER_PPARGS += -DIS_MAC=0
endif

ifeq ($(MOZ_BUILD_APP),camino)
TEST_DRIVER_PPARGS += -DIS_CAMINO=1
else
TEST_DRIVER_PPARGS += -DIS_CAMINO=0
endif

ifeq ($(host_os), cygwin)
TEST_DRIVER_PPARGS += -DIS_CYGWIN=1
endif

ifeq ($(ENABLE_TESTS), 1)
TEST_DRIVER_PPARGS += -DIS_TEST_BUILD=1
else
TEST_DRIVER_PPARGS += -DIS_TEST_BUILD=0
endif

ifeq ($(MOZ_DEBUG), 1)
TEST_DRIVER_PPARGS += -DIS_DEBUG_BUILD=1
else
TEST_DRIVER_PPARGS += -DIS_DEBUG_BUILD=0
endif

runtests.py: runtests.py.in
	$(PYTHON) $(topsrcdir)/config/Preprocessor.py \
	$(TEST_DRIVER_PPARGS) $(DEFINES) $(ACDEFINES) $^ > $@

automation.py: $(topsrcdir)/build/pgo/automation.py.in
	$(PYTHON) $(topsrcdir)/config/Preprocessor.py \
	$(TEST_DRIVER_PPARGS) $(DEFINES) $(ACDEFINES) $^ > $@

GARBAGE += runtests.py automation.py

libs:: $(_SERV_FILES)
	$(INSTALL) $^ $(_DEST_DIR)

# Binaries that don't get packaged with the build,
# but that we need for the test harness
TEST_HARNESS_BINS := \
  xpcshell$(BIN_SUFFIX) \
  ssltunnel$(BIN_SUFFIX) \
  certutil$(BIN_SUFFIX) \
  pk12util$(BIN_SUFFIX) \
  $(NULL)

# Components / typelibs that don't get packaged with
# the build, but that we need for the test harness.
TEST_HARNESS_COMPONENTS := \
  test_necko.xpt \
  $(NULL)

# We need the test plugin as some tests rely on it
ifeq (Darwin,$(OS_TARGET))
TEST_HARNESS_PLUGINS := \
  Test.plugin/
else
TEST_HARNESS_PLUGINS := \
  $(DLL_PREFIX)nptest$(DLL_SUFFIX)
endif

# Rules for staging the necessary harness bits for a test package
PKG_STAGE = $(DIST)/test-package-stage

stage-package:
	$(NSINSTALL) -D $(PKG_STAGE)/mochitest && $(NSINSTALL) -D $(PKG_STAGE)/plugins
	@(cd $(DEPTH)/_tests/testing/mochitest/ && tar $(TAR_CREATE_FLAGS) - *) | (cd $(PKG_STAGE)/mochitest && tar -xf -)
	@(cd $(DIST)/bin && tar $(TAR_CREATE_FLAGS) - $(TEST_HARNESS_BINS)) | (cd $(PKG_STAGE)/bin && tar -xf -)
	@(cd $(DIST)/bin/components && tar $(TAR_CREATE_FLAGS) - $(TEST_HARNESS_COMPONENTS)) | (cd $(PKG_STAGE)/bin/components && tar -xf -)
	@(cd $(topsrcdir)/build/pgo/certs && tar $(TAR_CREATE_FLAGS) - *) | (cd $(PKG_STAGE)/certs && tar -xf -)
ifdef MOZ_PLUGINS
	@(cd $(DIST)/bin/plugins && tar $(TAR_CREATE_FLAGS) - $(TEST_HARNESS_PLUGINS)) | (cd $(PKG_STAGE)/plugins && tar -xf -)
endif
