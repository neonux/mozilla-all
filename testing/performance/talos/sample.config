# Sample Talos configuration file

# The title of the report
title: firefox_testing

#*** output options ****
#uncomment to turn on dump to csv option
#csv_dir: 'output'
#comment out next two lines to disable send to graph server
results_server: 'url.of.graphserver'
results_link: '/bulk.cgi'

# Path to Firefox to test
firefox: firefox/firefox.exe

branch: testbranch

buildid: testbuildid

profile_path: base_profile

init_url: getInfo.html

# Preferences to set in the test (use "preferences : {}" for no prefs)
preferences : 
  browser.EULA.override : true
  security.fileuri.strict_origin_policy : false
  browser.shell.checkDefaultBrowser : false
  browser.warnOnQuit : false
  browser.link.open_newwindow : 2
  dom.allow_scripts_to_close_windows : true
  dom.disable_open_during_load: false
  dom.max_script_run_time : 0
  browser.dom.window.dump.enabled: true
  network.proxy.type : 1
  network.proxy.http : localhost
  network.proxy.http_port : 80
  dom.disable_window_flip : true
  dom.disable_window_move_resize : true
  security.enable_java : false
  extensions.checkCompatibility : false
  extensions.update.notifyUser: false

# Extensions to install in test (use "extensions: {}" for none)
# Need quotes around guid because of curly braces
# extensions : 
#     "{12345678-1234-1234-1234-abcd12345678}" : c:\path\to\unzipped\xpi
#     foo@sample.com : c:\path\to\other\unzipped\xpi
extensions : {}

#any directories whose contents need to be installed in the browser before running the tests
# this assumes that the directories themselves already exist in the firefox path
dirs:
  chrome : page_load_test/chrome
  components : page_load_test/components

# Environment variables to set during test (use env: {} for none)
env : 
  NO_EM_RESTART : 1
# Tests to run
#  url       : (REQUIRED) url to load into the given firefox browser
#  url_mod   : (OPTIONAL) a bit of code to be evaled and added to the given url during each cycle of the test
#  resolution: (REQUIRED) how long (in seconds) to pause between counter sampling
#  cycles    : (REQUIRED) how many times to run the test
#  timeout   : (OPTIONAL) how many seconds the test can run before we consider it failed and quit (default 8 hours)
#  counters  : (REQUIRED) types of system activity to monitor during test run, can be empty 
#            For possible values of counters argument on Windows, see
#            http://technet2.microsoft.com/WindowsServer/en/Library/86b5d116-6fb3-427b-af8c-9077162125fe1033.mspx?mfr=true
#            Possible values on Linux and Mac:
#            counters : ['Private Bytes', 'RSS']
#            Standard windows values:
#            counters : ['Working Set', 'Private Bytes', '% Processor Time']

# to set up a new test it must have the correct configuration options and drop information in a standard format
# the format is seen in the regular expressions in ttest.py
# to see how the data passed from the browser is processed see send_to_graph and send_to_csv in run_tests.py
tests :
  ts :
    url : startup_test/startup_test.html?begin=
    url_mod : str(int(time.time()*1000))
    resolution : 1 
    cycles : 20
    win_counters : []
    unix_counters : []
  tp: 
    url :  '-tp page_load_test/manifest.txt -tpchrome -tpformat tinderbox -tpcycles 5'
    resolution : 1
    cycles : 1
    win_counters : ['Working Set', 'Private Bytes', '% Processor Time']
    unix_counters : [ 'Private Bytes', 'RSS']
  tp_js: 
    url : '"http://localhost/page_load_test/framecycler.html?quit=1&cycles=5"'
    resolution : 1
    cycles : 1
    win_counters : ['Working Set', 'Private Bytes', '% Processor Time']
    unix_counters : [ 'Private Bytes', 'RSS']
  tdhtml:
    url: '-tp page_load_test/dhtml/dhtml.manifest -tpchrome -tpformat tinderbox -tpcycles 5'
    resolution : 1
    cycles : 1
    win_counters : []
    unix_counters : []
  tgfx:
    url: '-tp page_load_test/gfx/gfx.manifest -tpchrome -tpformat tinderbox -tpcycles 5 -tprender'
    resolution : 1
    cycles : 1
    win_counters : []
    unix_counters : []
  tsvg:
    url: '-tp page_load_test/svg/svg.manifest -tpchrome -tpformat tinderbox -tpcycles 5'
    resolution : 1
    cycles : 1
    win_counters : []
    unix_counters : []
  twinopen:
    url: startup_test/twinopen/winopen.xul?phase1=20
    resolution: 1
    cycles : 1
    win_counters: []
    unix_counters : []
  tjss:
    url: '-tp page_load_test/jss/jss.manifest -tpchrome -tpformat tinderbox -tpcycles 1'
    resolution : 1
    cycles : 1
    win_counters : []
    unix_counters : []
  tsspider:
    url: '-tp page_load_test/sunspider/sunspider.manifest -tpchrome -tpformat tinderbox -tpcycles 5'
    resolution : 1
    cycles : 1
    win_counters : []
    unix_counters : []
  
