<?xml version="1.0"?>

# -*- Mode: Java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the Firefox Sanitizer.
#
# The Initial Developer of the Original Code is
# Ben Goodger.
# Portions created by the Initial Developer are Copyright (C) 2005
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Ben Goodger <ben@mozilla.org>
#   Giorgio Maone <g.maone@informaction.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

<?xml-stylesheet href="chrome://global/skin/"?>

<!DOCTYPE prefwindow [
  <!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
  <!ENTITY % sanitizeDTD SYSTEM "chrome://browser/locale/sanitize.dtd">
  %brandDTD;
  %sanitizeDTD;
]>

<prefwindow id="SanitizeDialog" type="child"
            xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
            dlgbuttons="accept,cancel"
            title="&sanitizeDialog.title;"
            style="width: &window.width;;"
            ondialogaccept="gSanitizePromptDialog.sanitize();">

  <prefpane id="SanitizeDialogPane" onpaneload="gSanitizePromptDialog.init();">
    <stringbundle id="bundleBrowser" src="chrome://browser/locale/browser.properties"/>
    
    <script type="application/x-javascript" src="chrome://browser/content/sanitize.js"/>
    <script type="application/x-javascript">
    <![CDATA[
      var gSanitizePromptDialog = {
        init: function ()
        {
          var s = new Sanitizer();
          var sanitizePreferences = document.getElementById("sanitizePreferences");
          for (var i = 0; i < sanitizePreferences.childNodes.length; ++i) {
            var preference = sanitizePreferences.childNodes[i];
            var name = s.getNameFromPreference(preference.name);
            if (!s.canClearItem(name)) 
              preference.disabled = true;
          }
          
          var bundleBrowser = document.getElementById("bundleBrowser");
          document.documentElement.getButton("accept").label = bundleBrowser.getString("sanitizeButton");
        },
      
        sanitize: function ()
        {
          var s = new Sanitizer();
          var sanitizePreferences = document.getElementById("sanitizePreferences");
          var preference, name;
          for (var i = 0; i < sanitizePreferences.childNodes.length; ++i) {
            preference = sanitizePreferences.childNodes[i];
            if (preference.value) {
              name = s.getNameFromPreference(preference.name);
              try {
                s.clearItem(name);
              } catch(er) {
                dump(er + " sanitizing " + name); 
                // TODO: give user feedback about partially failed sanitization
              }
            }
          }
        },
        
        onReadGeneric: function ()
        {
          var preferences = document.getElementById("sanitizePreferences");
          var found = false;
          for (var i = 0; i < preferences.childNodes.length; ++i) {
            var preference = preferences.childNodes[i];
            if (preference.value && !preference.disabled) {
              found = true;
              break;
            }
          }
          try {
            document.documentElement.getButton("accept").disabled = !found;
          }
          catch (e) { }
          return undefined;
        },

        onReadDownloads: function (aEvent)
        {
          // Call the common function that will update the accept button if needed
          this.onReadGeneric();

          let historyPref = document.getElementById("privacy.item.history")
          let downloadPref = document.getElementById("privacy.item.downloads");

          // Disable the checkbox if history is selected
          let downloads = document.getElementById("downloads-checkbox");
          downloads.disabled = historyPref.value;

          // The "Download History" checkbox is selected if either of the history or
          // downloads preferences are true.
          return historyPref.value || downloadPref.value;
        },

        updateDownloadHistory: function ()
        {
          // When toggling history, we automatically clear download history too,
          // so we disable that control and set its value to true.
          let downloads = document.getElementById("downloads-checkbox");
          let history = document.getElementById("history-checkbox");
          let s = new Sanitizer();
          downloads.disabled = history.checked ||
                               !s.canClearItem("downloads");
          if (history.checked)
            downloads.checked = true;
        },
      };
    ]]>
    </script>

    <preferences id="sanitizePreferences">
      <preference id="privacy.item.history"               name="privacy.item.history"               type="bool" readonly="true"/>
      <preference id="privacy.item.formdata"              name="privacy.item.formdata"              type="bool" readonly="true"/>
      <preference id="privacy.item.passwords"             name="privacy.item.passwords"             type="bool" readonly="true"/>
      <preference id="privacy.item.downloads"             name="privacy.item.downloads"             type="bool" readonly="true"/>
      <preference id="privacy.item.cookies"               name="privacy.item.cookies"               type="bool" readonly="true"/>
      <preference id="privacy.item.cache"                 name="privacy.item.cache"                 type="bool" readonly="true"/>
      <preference id="privacy.item.offlineApps"           name="privacy.item.offlineApps"           type="bool"/>
      <preference id="privacy.item.sessions"              name="privacy.item.sessions"              type="bool" readonly="true"/>
    </preferences>

    <description>&sanitizeItems.label;</description>

    <checkbox id="history-checkbox"
              label="&itemHistory.label;"
              accesskey="&itemHistory.accesskey;"
              preference="privacy.item.history"
              oncommand="gSanitizePromptDialog.updateDownloadHistory();"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>
    <checkbox id="downloads-checkbox"
              class="indent"
              label="&itemDownloads.label;"
              accesskey="&itemDownloads.accesskey;"
              preference="privacy.item.downloads"
              onsyncfrompreference="return gSanitizePromptDialog.onReadDownloads();"/>
    <checkbox label="&itemFormSearchHistory.label;"
              accesskey="&itemFormSearchHistory.accesskey;"
              preference="privacy.item.formdata"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>
    <checkbox label="&itemCache.label;"
              accesskey="&itemCache.accesskey;"
              preference="privacy.item.cache"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>
    <checkbox label="&itemCookies.label;"
              accesskey="&itemCookies.accesskey;"
              preference="privacy.item.cookies"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>
    <checkbox label="&itemOfflineApps.label;"
              accesskey="&itemOfflineApps.accesskey;"
              preference="privacy.item.offlineApps"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>
    <checkbox label="&itemPasswords.label;"
              accesskey="&itemPasswords.accesskey;"
              preference="privacy.item.passwords"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>
    <checkbox label="&itemSessions.label;"
              accesskey="&itemSessions.accesskey;"
              preference="privacy.item.sessions"
              onsyncfrompreference="return gSanitizePromptDialog.onReadGeneric();"/>

  </prefpane>
</prefwindow>
