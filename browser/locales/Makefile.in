# vim:set ts=8 sw=8 sts=8 noet:
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the Mozilla Browser code.
#
# The Initial Developer of the Original Code is
# Benjamin Smedberg <bsmedberg@covad.net>
# Portions created by the Initial Developer are Copyright (C) 2004
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@
relativesrcdir = browser/locales

include $(DEPTH)/config/autoconf.mk

include $(topsrcdir)/config/config.mk

vpath %.xml @srcdir@/en-US/searchplugins
vpath %.xml $(LOCALE_SRCDIR)/searchplugins

ifdef LOCALE_MERGEDIR
vpath crashreporter%.ini $(LOCALE_MERGEDIR)/browser/crashreporter
endif
vpath crashreporter%.ini $(LOCALE_SRCDIR)/crashreporter
ifdef LOCALE_MERGEDIR
vpath crashreporter%.ini @srcdir@/en-US/crashreporter
endif


run_for_effects := $(shell if ! test -d $(DIST); then $(NSINSTALL) -D $(DIST); fi; if ! test -d $(DIST)/branding; then $(NSINSTALL) -D $(DIST)/branding; fi)
_ABS_DIST := $(shell cd $(DIST) && pwd)

ifdef MOZ_BRANDING_DIRECTORY
SUBMAKEFILES += \
	$(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/Makefile \
	$(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales/Makefile \
	$(NULL)
endif

# This makefile uses variable overrides from the libs-% target to
# build non-default locales to non-default dist/ locations. Be aware!

AB = $(firstword $(subst -, ,$(AB_CD)))

APP_VERSION := $(shell cat $(srcdir)/../config/version.txt)

PWD := $(shell pwd)
core_abspath = $(if $(findstring :,$(1)),$(1),$(if $(filter /%,$(1)),$(1),$(PWD)/$(1)))

# ZIP_IN is defaulted to be compatible with the files the wget-en-US target
# pulls. You may override ZIP_IN if you provide your own files. You also _must_
# override ZIP_IN when MOZ_PKG_PRETTYNAMES is defined - the default will not
# work in that case.
ZIP_IN ?= $(_ABS_DIST)/$(PACKAGE)

DEFINES += \
	-DAB_CD=$(AB_CD) \
	-DMOZ_LANGPACK_EID=langpack-$(AB_CD)@firefox.mozilla.org \
	-DMOZ_APP_VERSION=$(MOZ_APP_VERSION) \
	-DLOCALE_SRCDIR=$(call core_abspath,$(LOCALE_SRCDIR)) \
	-DPKG_BASENAME="$(PKG_BASENAME)" \
	-DPKG_INST_BASENAME="$(PKG_INST_BASENAME)" \
	$(NULL)

ifndef MOZ_BRANDING_DIRECTORY
DEFINES += -DMOZ_USE_GENERIC_BRANDING
endif

ifeq (,$(filter-out pref,$(MOZ_EXTENSIONS)))
DEFINES += -DEXTENSION_PREF
endif

PREF_JS_EXPORTS = $(LOCALE_SRCDIR)/firefox-l10n.js

include $(topsrcdir)/config/rules.mk

libs::
	@if test -f "$(LOCALE_SRCDIR)/existing-profile-defaults.js"; then \
	  $(PERL) $(topsrcdir)/config/preprocessor.pl $(PREF_PPFLAGS) $(DEFINES) $(ACDEFINES) $(XULPPFLAGS) \
	    $(LOCALE_SRCDIR)/existing-profile-defaults.js > $(FINAL_TARGET)/defaults/existing-profile-defaults.js; \
	fi
install::
	@if test -f "$(LOCALE_SRCDIR)/existing-profile-defaults.js"; then \
	  $(PERL) $(topsrcdir)/config/preprocessor.pl $(PREF_PPFLAGS) $(DEFINES) $(ACDEFINES) $(XULPPFLAGS) \
	    $(LOCALE_SRCDIR)/existing-profile-defaults.js > $(DESTDIR)$(mozappdir)/defaults/existing-profile-defaults.js; \
	fi

ifeq ($(OS_ARCH),OS2)
README_FILES = \
	os2/README.txt \
	$(NULL)
else
README_FILES = \
	README.txt \
	$(NULL)
endif

PROFILE_FILES = \
	bookmarks.html \
	localstore.rdf \
	$(NULL)

ifeq ($(OS_ARCH),WINNT)
PROFILE_FILES += win/mimeTypes.rdf
else
ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
PROFILE_FILES += mac/mimeTypes.rdf
else
PROFILE_FILES += unix/mimeTypes.rdf
endif
endif

PROFILE_CHROME = userChrome-example.css userContent-example.css

libs:: $(addprefix $(LOCALE_SRCDIR)/,$(README_FILES))
ifeq ($(OS_ARCH),WINNT)
	$(EXIT_ON_ERROR) \
	for file in $^; do \
	  $(PERL) -pe 's/(?<!\r)\n/\r\n/g;' < $$file > $(FINAL_TARGET)/`basename $$file`; \
	done
else
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)
endif

libs:: $(addprefix $(LOCALE_SRCDIR)/profile/,$(PROFILE_FILES))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/defaults/profile

libs:: $(addprefix $(LOCALE_SRCDIR)/profile/chrome/,$(PROFILE_CHROME))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/defaults/profile/chrome

install:: $(addprefix $(LOCALE_SRCDIR)/profile/,$(PROFILE_FILES))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/defaults/profile

install:: $(addprefix $(LOCALE_SRCDIR)/profile/chrome/,$(PROFILE_CHROME))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/defaults/profile/chrome

SEARCH_PLUGINS = $(shell cat $(LOCALE_SRCDIR)/searchplugins/list.txt)

libs:: $(addsuffix .xml,$(SEARCH_PLUGINS))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/searchplugins

install:: $(addsuffix .xml,$(SEARCH_PLUGINS))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/searchplugins

MICROSUMMARY_GENERATORS = $(shell cat $(LOCALE_SRCDIR)/microsummary-generators/list.txt)
MICROSUMMARY_GENERATOR_PREFIX = $(addprefix $(LOCALE_SRCDIR)/microsummary-generators/,$(MICROSUMMARY_GENERATORS))

libs::
ifneq (,$(strip $(MICROSUMMARY_GENERATORS)))
        $(addsuffix .xml,$(MICROSUMMARY_GENERATOR_PREFIX))
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)/microsummary-generators
endif

install::
ifneq (,$(strip $(MICROSUMMARY_GENERATORS)))
        $(addsuffix .xml,$(MICROSUMMARY_GENERATOR_PREFIX))
	$(SYSINSTALL) $(IFLAGS1) $^ $(DESTDIR)$(mozappdir)/microsummary-generators
endif

tests:
ifneq (en-US, $(AB_CD))
	@echo "Verifying $(AB_CD) installer variable usage"
	@$(PERL) $(topsrcdir)/toolkit/mozapps/installer/windows/nsis/check-locales.pl $(LOCALE_SRCDIR)/installer
endif

clobber-%:
	$(RM) -rf $(DIST)/xpi-stage/locale-$*

libs-%:
	$(NSINSTALL) -D $(DIST)/install
	@$(MAKE) -C ../../toolkit/locales libs-$* BOTH_MANIFESTS=1
	@$(MAKE) -C ../../extensions/reporter/locales libs AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1
	@$(MAKE) -C ../../extensions/spellcheck/locales AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1
	@$(MAKE) libs AB_CD=$* XPI_NAME=locale-$* PREF_DIR=defaults/pref BOTH_MANIFESTS=1
ifdef MOZ_BRANDING_DIRECTORY
	@$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY)/locales AB_CD=$* XPI_NAME=locale-$* BOTH_MANIFESTS=1
endif
	@$(MAKE) tests AB_CD=$*

ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
MOZ_PKG_MAC_DSSTORE=$(_ABS_DIST)/branding/dsstore
MOZ_PKG_MAC_BACKGROUND=$(_ABS_DIST)/branding/background.png
MOZ_PKG_MAC_ICON=$(_ABS_DIST)/branding/disk.icns
MOZ_PKG_MAC_EXTRA=--symlink "/Applications:/ "
endif

PACKAGER_NO_LIBS = 1
include $(topsrcdir)/toolkit/mozapps/installer/packager.mk
include $(call EXPAND_LOCALE_SRCDIR,toolkit/locales)/installer/windows/charset.mk

repackage-win32-installer: WIN32_INSTALLER_OUT="$(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
repackage-win32-installer: $(WIN32_INSTALLER_IN) $(SUBMAKEFILES)
	@echo "Repackaging $(WIN32_INSTALLER_IN) into $(WIN32_INSTALLER_OUT)."
ifdef MOZ_BRANDING_DIRECTORY
	$(MAKE) -C $(DEPTH)/$(MOZ_BRANDING_DIRECTORY) export
else
	$(MAKE) -C ../installer/windows export
endif
	if test ! -d $(_ABS_DIST)/$(PKG_INST_PATH); then \
	  $(NSINSTALL) -D $(_ABS_DIST)/$(PKG_INST_PATH); \
	fi
	$(RM) -rf l10n-stage
	$(NSINSTALL) -D l10n-stage
	$(CYGWIN_WRAPPER) 7z x -ol10n-stage $(WIN32_INSTALLER_IN)
	$(RM) -r l10n-stage/localized
	$(RM) l10n-stage/setup.exe
	cp -r $(DIST)/xpi-stage/locale-$(AB_CD) l10n-stage/localized
	$(MAKE) -C ../installer/windows CONFIG_DIR=l10ngen l10ngen/setup.exe l10ngen/7zSD.sfx
	cp ../installer/windows/l10ngen/setup.exe l10n-stage
	$(NSINSTALL) -D l10n-stage/localized/uninstall
	cp ../installer/windows/l10ngen/helper.exe l10n-stage/localized/uninstall
	rm -f app.7z
	cd l10n-stage && \
	  $(CYGWIN_WRAPPER) 7z a -r -t7z ../app.7z -mx -m0=BCJ2 -m1=LZMA:d24 -m2=LZMA:d19 -m3=LZMA:d19 -mb0:1 -mb0s1:2 -mb0s2:3
	cat ../installer/windows/l10ngen/7zSD.sfx \
	    $(topsrcdir)/browser/installer/windows/app.tag \
	    app.7z > $(WIN32_INSTALLER_OUT)
	chmod 0755 $(WIN32_INSTALLER_OUT)

ifeq (WINNT,$(OS_ARCH))
repackage-win32-installer-%: WIN32_INSTALLER_IN=$(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe
repackage-win32-installer-%: $(WIN32_INSTALLER_IN) libs-%
	@$(MAKE) repackage-win32-installer AB_CD=$* WIN32_INSTALLER_IN=$(WIN32_INSTALLER_IN)
else
repackage-win32-installer-%: ;
endif

ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/MacOS
else
STAGEDIST = $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)
endif

$(STAGEDIST): AB_CD:=en-US
$(STAGEDIST): UNPACKAGE=$(ZIP_IN)
$(STAGEDIST): $(ZIP_IN)
# only mac needs to remove the parent of STAGEDIST...
ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
	if test -d $(DIST)/l10n-stage; then \
	  $(RM) -r -v $(DIST)/l10n-stage; \
	fi
else
# ... and windows doesn't like removing STAGEDIST itself, remove all children
	if test -d $(DIST)/l10n-stage; then \
	  find $(STAGEDIST) -maxdepth 1 -print0 | xargs -0 $(RM) -r ; \
	fi
endif
	$(NSINSTALL) -D $(DIST)/l10n-stage
	cd $(DIST)/l10n-stage && \
	  $(UNMAKE_PACKAGE)
ifdef MOZ_PKG_PRETTYNAMES
ifneq (,$(filter WINNT Linux,$(OS_ARCH)))
# Linux and Windows unpack to a directory named after the MOZ_APP_NAME
# they were built with. This is fine when when MOZ_PKG_PRETTYNAMES
# isn't defined, because MOZ_PKG_APPNAME will be the same as MOZ_APP_NAME.
# However, when MOZ_PKG_PRETTYNAMES is passed MOZ_PKG_APPNAME inherits
# from MOZ_PKG_DISPLAYNAME, which is not always the same as MOZ_APP_NAME.
	cd $(DIST)/l10n-stage && \
      mv $(MOZ_APP_NAME) $(MOZ_PKG_APPNAME)
endif
endif
	make clobber-zip AB_CD=en-US

clobber-zip:
	$(RM) $(STAGEDIST)/chrome/$(AB_CD).jar \
	  $(STAGEDIST)/chrome/$(AB_CD).manifest \
	  $(STAGEDIST)/defaults/pref/firefox-l10n.js
	$(RM) -r $(STAGEDIST)/microsummary-generators \
	  $(STAGEDIST)/searchplugins \
	  $(STAGEDIST)/dictionaries \
	  $(STAGEDIST)/defaults/profile \
	  $(STAGEDIST)/chrome/$(AB_CD)

unpack: $(STAGEDIST)
	@echo done unpacking

repackage-zip: ZIP_OUT="$(_ABS_DIST)/$(PACKAGE)"
repackage-zip: UNPACKAGE="$(ZIP_IN)"
repackage-zip:
ifeq (WINNT,$(OS_ARCH))
	$(RM) -r $(STAGEDIST)/uninstall
	$(NSINSTALL) -D $(STAGEDIST)/uninstall
	cp ../installer/windows/l10ngen/helper.exe $(STAGEDIST)/uninstall
endif
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  tar $(TAR_CREATE_FLAGS) - * | ( cd $(STAGEDIST) && tar -xf - )
ifneq (en,$(AB))
ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj
endif
endif
	$(NSINSTALL) -D $(DIST)/l10n-stage/$(PKG_PATH)
	cd $(DIST)/l10n-stage; \
	  $(MAKE_PACKAGE)
	# packaging done, undo l10n stuff
ifneq (en,$(AB))
ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
	mv $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/$(AB).lproj $(_ABS_DIST)/l10n-stage/$(MOZ_PKG_APPNAME)/$(_APPNAME)/Contents/Resources/en.lproj
endif
endif
	$(MAKE) clobber-zip AB_CD=$(AB_CD)
	$(NSINSTALL) -D $(DIST)/$(PKG_PATH)
	mv -f "$(DIST)/l10n-stage/$(PACKAGE)" "$(DIST)/$(PACKAGE)"

repackage-zip-%: ZIP_IN=$(_ABS_DIST)/$(PACKAGE)
repackage-zip-%: $(ZIP_IN) $(STAGEDIST) libs-%
	@$(MAKE) repackage-zip AB_CD=$* ZIP_IN=$(ZIP_IN)

langpack-%: LANGPACK_FILE=$(_ABS_DIST)/$(PKG_LANGPACK_PATH)$(PKG_LANGPACK_BASENAME).xpi
langpack-%: AB_CD=$*
langpack-%: XPI_NAME=locale-$*
langpack-%: libs-%
	@echo "Making langpack $(LANGPACK_FILE)"
	$(NSINSTALL) -D $(DIST)/$(PKG_LANGPACK_PATH)
	$(PERL) $(topsrcdir)/config/preprocessor.pl $(DEFINES) $(ACDEFINES) -I$(call EXPAND_LOCALE_SRCDIR,toolkit/locales)/defines.inc -I$(LOCALE_SRCDIR)/defines.inc $(srcdir)/generic/install.rdf > $(FINAL_TARGET)/install.rdf
	cd $(DIST)/xpi-stage/locale-$(AB_CD) && \
	  $(ZIP) -r9D $(LANGPACK_FILE) install.rdf chrome/$(AB_CD).jar chrome.manifest

# This is a generic target that will make a langpack, repack ZIP (+tarball)
# builds, and repack an installer if applicable. It is called from the
# tinderbox scripts. Alter it with caution.
#
# Note: the last target called here should be repackage-zip-$* as the l10n build
# systems rely on dist/l10n-stage/<product> to be in place in order to package
# the complete MAR files.

installers-%: clobber-% langpack-% repackage-win32-installer-% repackage-zip-%
	@echo "repackaging done"

ifdef MOZ_UPDATER
libs:: $(addprefix $(LOCALE_SRCDIR)/,updater/updater.ini)
ifeq ($(OS_ARCH),WINNT)
	cat $< $(srcdir)/updater_append.ini $(srcdir)/../installer/windows/nsis/updater_append.ini | \
	  sed -e "s/%AB_CD%/$(AB_CD)/" | \
	  iconv -f UTF-8 -t $(WIN_INSTALLER_CHARSET) > $(FINAL_TARGET)/updater.ini
else
	cat $< $(srcdir)/updater_append.ini | \
	  sed -e "s/%AB_CD%/$(AB_CD)/" > $(FINAL_TARGET)/updater.ini
endif
endif

ifdef MOZ_CRASHREPORTER
libs:: crashreporter-override.ini
	$(SYSINSTALL) $(IFLAGS1) $^ $(FINAL_TARGET)
endif

# This variable is to allow the wget-en-US target to know which ftp server to download from
ifndef EN_US_BINARY_URL 
EN_US_BINARY_URL = $(error You must set EN_US_BINARY_URL)
endif

# This make target allows us to wget the latest en-US binary from a specified website
# The make installers-% target needs the en-US binary in dist/
# and for the windows repackages we need the .installer.exe in dist/sea
wget-en-US:
ifndef WGET
	$(error Wget not installed)
endif
	(cd $(_ABS_DIST) && $(WGET) -nv -N  $(EN_US_BINARY_URL)/$(PACKAGE))
	@echo "Downloaded $(EN_US_BINARY_URL)/$(PACKAGE) to $(_ABS_DIST)/$(PACKAGE)"
ifeq ($(OS_ARCH), WINNT)
	$(NSINSTALL) -D $(_ABS_DIST)/$(PKG_INST_PATH)
	(cd $(_ABS_DIST)/$(PKG_INST_PATH) && $(WGET) -nv -N "$(EN_US_BINARY_URL)/$(PKG_PATH)$(PKG_INST_BASENAME).exe")
	@echo "Downloaded $(EN_US_BINARY_URL)/$(PKG_PATH)$(PKG_INST_BASENAME).exe to $(_ABS_DIST)/$(PKG_INST_PATH)$(PKG_INST_BASENAME).exe"
endif

ident:
	@$(PYTHON) $(topsrcdir)/config/printconfigsetting.py $(STAGEDIST)/application.ini App SourceStamp

#These make targets call prepare-repackages by setting different UPLOAD_DIR
prepare-upload-latest-%:
	@$(MAKE) prepare-repackages-$* UPLOAD_DIR=$(DIST)/upload/latest

prepare-upload-dated-%:
	@$(MAKE) prepare-repackages-$* UPLOAD_DIR=$(DIST)/upload/`date "+%Y-%m-%d-%H"`-$(MOZ_PKG_APPNAME)$(MOZ_APP_VERSION)-l10n

#Each platform uploads their xpi files to different folders
ifeq (Linux, $(OS_ARCH))
XPI_DESTINATION = linux-xpi
endif
ifeq (Darwin, $(OS_ARCH))
XPI_DESTINATION = mac-xpi
endif
ifeq (WINNT, $(OS_ARCH))
XPI_DESTINATION = windows-xpi
endif

# This target will generate a UPLOAD_DIR folder with
# l10n repackages in the way that we offer l10n nightlies
#  1) ./ the binary
#  2) ./{linux,mac,windows}-xpi/locale.xpi
prepare-repackages-%:
ifndef XPI_DESTINATION
	$(error XPI_DESTINATION not defined; \
	This is the folder where the xpi files will be moved to)
endif
ifndef UPLOAD_DIR
	$(error UPLOAD_DIR not defined)
endif
	$(NSINSTALL) -D $(UPLOAD_DIR)
	$(NSINSTALL) -D $(UPLOAD_DIR)/$(XPI_DESTINATION)
# Move the langpack
	mv $(DIST)/install/firefox-$(MOZ_APP_VERSION).$*.langpack.xpi \
	   $(UPLOAD_DIR)/$(XPI_DESTINATION)/$*.xpi
# Move the repackage
	mv $(DIST)/firefox-$(MOZ_APP_VERSION).$*.* \
	   $(UPLOAD_DIR)/.
# Move the windows installer
ifeq (WINNT, $(OS_ARCH))
	mv $(DIST)/install/sea/firefox-$(MOZ_APP_VERSION).$*.win32.installer.exe \
	   $(UPLOAD_DIR)/.
endif
# Set the permissions that the folders will have in ftp once uploaded
	chmod -vR 775 $(UPLOAD_DIR)

merge-%:
ifdef LOCALE_MERGEDIR
	$(RM) -rf $(LOCALE_MERGEDIR)
	MACOSX_DEPLOYMENT_TARGET= compare-locales -m $(LOCALE_MERGEDIR) $(srcdir)/l10n.ini $(L10NBASEDIR) $*
endif
	@echo
