/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is nsIWebProgressListener2 interface.
 *
 * The Initial Developer of the Original Code is
 * Christian Biesinger <cbiesinger@web.de>.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mark Pilgrim <pilgrim@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIWebProgressListener.idl"

/**
 * An extended version of nsIWebProgressListener.
 */
[scriptable, uuid(9fad5966-62ea-11e0-966c-001320257da5)]
interface nsIWebProgressListener2 : nsIWebProgressListener {
  /**
   * Notification that the progress has changed for one of the requests
   * associated with aWebProgress.  Progress totals are reset to zero when all
   * requests in aWebProgress complete (corresponding to onStateChange being
   * called with aStateFlags including the STATE_STOP and STATE_IS_WINDOW
   * flags).
   *
   * This function is identical to nsIWebProgressListener::onProgressChange,
   * except that this function supports 64-bit values.
   *
   * @param aWebProgress
   *        The nsIWebProgress instance that fired the notification.
   * @param aRequest
   *        The nsIRequest that has new progress.
   * @param aCurSelfProgress
   *        The current progress for aRequest.
   * @param aMaxSelfProgress
   *        The maximum progress for aRequest.
   * @param aCurTotalProgress
   *        The current progress for all requests associated with aWebProgress.
   * @param aMaxTotalProgress
   *        The total progress for all requests associated with aWebProgress.
   *
   * NOTE: If any progress value is unknown, then its value is replaced with -1.
   *
   * @see nsIWebProgressListener2::onProgressChange64
   */
  void onProgressChange64(in nsIWebProgress aWebProgress,
                          in nsIRequest aRequest,
                          in long long aCurSelfProgress,
                          in long long aMaxSelfProgress,
                          in long long aCurTotalProgress,
                          in long long aMaxTotalProgress);

  /**
   * Notification that a refresh or redirect has been requested in aWebProgress
   * For example, via a <meta http-equiv="refresh"> or an HTTP Refresh: header
   *
   * @param aWebProgress
   *        The nsIWebProgress instance that fired the notification.
   * @param aRefreshURI
   *        The new URI that aWebProgress has requested redirecting to.
   * @param aMillis
   *        The delay (in milliseconds) before refresh.
   * @param aSameURI
   *        True if aWebProgress is requesting a refresh of the
   *        current URI.
   *        False if aWebProgress is requesting a redirection to
   *        a different URI.
   *
   * @return True if the refresh may proceed.
   *         False if the refresh should be aborted.
   */
  boolean onRefreshAttempted(in nsIWebProgress aWebProgress,
                             in nsIURI aRefreshURI,
                             in long aMillis,
                             in boolean aSameURI);

   /**
    * Flags for onLocationChange2
    *
    * LOCATION_CHANGE_NORMAL
    *   Nothing special.
    *
    * LOCATION_CHANGE_SAME_DOCUMENT
    *   This flag is on when |aWebProgress| did not load a new document. 
    *   For example,
    *     1. The user clicks that anchor in a document which is linking to 
    *        [1.a.] the document itself.
    *        [1.b.] a location only <#hash> portion changed.
    *     2. The user inputs [1.b.]'s URI in the location bar.
    *     3. Session history navigation.
    *        [3.a.] history.pushState(...), history.replaceState(...) or
    *               history.popState(...) is called and |aWebProgress| wants to
    *               update the UI.
    *        [3.b.] Back/Forward/Go to URI of [1.a.], [1.b.] or [3.a.].
    *        [3.c.] After session history is cleared.
    */

  const unsigned long LOCATION_CHANGE_NORMAL          = 0x00000001;
  const unsigned long LOCATION_CHANGE_SAME_DOCUMENT   = 0x00000002;

  /**
   * This function is identical to nsIWebProgressListener::onLocationChange,
   * except for aFlags argument.
   *
   * @param aFlags
   *        This is a value which explains the situation or the reason why
   *        the location has changed.
   */

  void onLocationChange2(in nsIWebProgress aWebProgress,
                         in nsIRequest aRequest,
                         in nsIURI aLocation,
                         in unsigned long aFlags);
};
