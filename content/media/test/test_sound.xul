<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
                 type="text/css"?>
<window title="sound tests"
  onload="runTests()"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <title>sound tests</title>
  <script type="application/javascript" 
   src="chrome://mochikit/content/MochiKit/packed.js"></script>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />

<body  xmlns="http://www.w3.org/1999/xhtml">
<p id="display">
</p>
<div id="content" style="display: none">

</div>
<pre id="test">
</pre>
</body>

<script class="testbody" type="application/javascript">
<![CDATA[

function runTests()
{
  SimpleTest.waitForExplicitFinish();

  netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');

  const nsISystemSoundService = Components.interfaces.nsISystemSoundService;
  var sysSoundService = Components.classes["@mozilla.org/systemsoundservice;1"].
                                   getService(nsISystemSoundService);
  isnot(sysSoundService, null, "failed to get the nsISystemSoundService");

  const nsISoundPlayer = Components.interfaces.nsISoundPlayer;
  var soundPlayer =
    Components.classes["@mozilla.org/content/media/soundplayer;1"].
               getService(nsISoundPlayer);
  isnot(soundPlayer, null, "failed to get the shared sound player");

  const nsISound = Components.interfaces.nsISound;
  var sound = Components.classes["@mozilla.org/sound;1"].getService(nsISound);
  isnot(sound, null, "failed to get the shared nsISound instance");

  function getCurrentURL() {
    var url = Components.classes["@mozilla.org/network/io-service;1"].
                         getService(Components.interfaces.nsIIOService).
                         newURI(location.href, null, null);
    url.QueryInterface(Components.interfaces.nsIURL);
    return url;
  }

  // All tests should run asynchronously because some methods of the interfaces
  // play the sound in another thread.
  testSysSoundBeep();

  const kDelay = 500;

  function testSysSoundBeep()
  {
    ok(true, "running testSysSoundBeep...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sysSoundService.beep();

    setTimeout(testSysSoundPlayAlias, kDelay);
  }

  function testSysSoundPlayAlias()
  {
    ok(true, "running testSysSoundPlayAlias...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sysSoundService.playAlias("foobar");

    setTimeout(testSysSoundPlayEventSound1, kDelay);
  }

  function testSysSoundPlayEventSound1()
  {
    ok(true, "running testSysSoundPlayEventSound1...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    // EVENT_NEW_MAIL_RECEIVED is supported on all platforms now.
    sysSoundService.playEventSound(
      nsISystemSoundService.EVENT_NEW_MAIL_RECEIVED);

    setTimeout(testSysSoundPlayEventSound2, kDelay);
  }

  function testSysSoundPlayEventSound2()
  {
    ok(true, "running testSysSoundPlayEventSound2...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    // EVENT_SELECT_DIALOG_OPEN isn't supported on all platforms now.
    sysSoundService.playEventSound(
      nsISystemSoundService.EVENT_SELECT_DIALOG_OPEN);

    setTimeout(createAnotherSystemSoundService, kDelay);
  }

  function createAnotherSystemSoundService()
  {
    ok(true, "running createAnotherSystemSoundService...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    var sysSound2 = Components.classes["@mozilla.org/systemsoundservice;1"].
                               createInstance(nsISystemSoundService);
    isnot(sysSound2, null, "failed to create another nsISystemSoundService");
    // The createInstance should return the same instance as the service.
    // The implementation have to be singleton.
    is(sysSound2, sysSoundService, "the new instance is created");
    sysSound2.playEventSound(nsISystemSoundService.EVENT_NEW_MAIL_RECEIVED);

    // The reference will be released, but it shouldn't release the instance.

    setTimeout(testSoundPlayerPlay1, kDelay);
  }

  function testSoundPlayerPlay1()
  {
    ok(true, "running testSoundPlayerPlay1...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    var url = getCurrentURL();
    url.fileName = "r11025_u8_c1.wav";
    soundPlayer.play(url);

    setTimeout(testSoundPlayerPlay2, kDelay);
  }

  function testSoundPlayerPlay2()
  {
    ok(true, "running testSoundPlayerPlay2...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    var url = getCurrentURL();
    url.fileName = "dont_be_this_file_name.wav";

    soundPlayer.play(url);

    setTimeout(testSoundPlayerStop, kDelay);
  }

  function testSoundPlayerStop()
  {
    ok(true, "running testSoundPlayerStop...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    soundPlayer.stop();

    setTimeout(createAnotherSoundPlayer, kDelay);
  }

  function createAnotherSoundPlayer()
  {
    ok(true, "running createAnotherSoundPlayer...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    var soundPlayer2 =
      Components.classes["@mozilla.org/content/media/soundplayer;1"].
                 createInstance(nsISoundPlayer);
    isnot(soundPlayer2, null, "failed to create another sound player");
    // The createInstance should return the same instance as the service.
    // The implementation have to be singleton.
    is(soundPlayer2, soundPlayer, "new sound player instance is created");
    var url = getCurrentURL();
    url.fileName = "r11025_u8_c1.wav";
    soundPlayer2.play(url);

    // The reference will be released, but it shouldn't release the instance.

    setTimeout(testSoundPlay, kDelay);
  }

  function testSoundPlay()
  {
    ok(true, "running testSoundPlay...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    var url = getCurrentURL();
    url.fileName = "r11025_u8_c1.wav";
    sound.play(url);

    setTimeout(testSoundPlaySystemSound1, kDelay);
  }

  function testSoundPlaySystemSound1()
  {
    ok(true, "running testSoundPlaySystemSound1...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sound.playSystemSound("foobar");

    setTimeout(testSoundPlaySystemSound2, kDelay);
  }

  function testSoundPlaySystemSound2()
  {
    ok(true, "running testSoundPlaySystemSound2...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sound.playSystemSound("_moz_mailbeep");

    setTimeout(testSoundPlaySystemSound3, kDelay);
  }

  function testSoundPlaySystemSound3()
  {
    ok(true, "running testSoundPlaySystemSound3...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sound.playSystemSound("_moz_selectdialog");

    setTimeout(testSoundBeep, kDelay);
  }

  function testSoundBeep()
  {
    ok(true, "running testSoundBeep...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sound.beep();

    setTimeout(testSoundPlayEventSound1, kDelay);
  }

  function testSoundPlayEventSound1()
  {
    ok(true, "running testPlayEventSound1...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sound.playEventSound(nsISound.EVENT_NEW_MAIL_RECEIVED);

    setTimeout(testSoundPlayEventSound2, kDelay);
  }

  function testSoundPlayEventSound2()
  {
    ok(true, "running testSoundPlayEventSound2...");
    netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
    sound.playEventSound(nsISound.EVENT_SELECT_DIALOG_OPEN);

    setTimeout(SimpleTest.finish, kDelay);
  }
}

]]>
</script>

</window>
