/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Stuart Parmenter <pavlov@netscape.com>
 *   Bobby Holley <bobbyholley@gmail.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIInputStream;
interface imgIContainer;
interface imgIDecoderObserver;

/**
 * imgIDecoder interface
 *
 * @author Stuart Parmenter <pavlov@netscape.com>
 * @version 0.2
 * @see imagelib2
 */
[scriptable, uuid(6fc61088-5443-4539-9e24-629a266a800a)]
interface imgIDecoder : nsISupports
{
  /**
   * Bits that can be passed to the decoder to affect decoding.
   * @name decodeflags
   *
   * Meanings:
   *
   * DECODER_FLAG_NONE: No flags
   *
   * DECODER_FLAG_HEADERONLY: Read basic data from the image in order to 
   * set up the image container,  but don't read any actual image data.
   */
  const long DECODER_FLAG_NONE       = 0x0;
  const long DECODER_FLAG_HEADERONLY = 0x1;

  /**
   * Initialize an image decoder.
   * @param aContainer The image container to decode to.
   * @param aObserver The observer for decode notification events.
   * @param aFlags Flags for the decoder
   *
   * @note The decoder should always pass NULL as the 
   * first two parameters to all of the imgIDecoderObserver APIs.
   */
  void init(in imgIContainer aImage, in imgIDecoderObserver aObserver,
            in unsigned long aFlags);

  /** 
   * Closes the stream.
   * @param aFlags Close flags of the CLOSE_FLAG_* Variety
   *
   * Resources are always freed with this call. If notifications are sent,
   * OnStopDecode is guaranteed to be called if it hasn't been called already.
   *
   * CLOSE_FLAG_DONTNOTIFY - Don't send any observer notifications, and don't
   * call imgIContainer::decodingComplete().
   */
  const long CLOSE_FLAG_DONTNOTIFY = 0x01;
  void close(in PRUint32 aFlags);

  /**
   * Flushes the stream.
   */
  void flush();

  /**
   * Writes data to the decoder.
   *
   * For Header-Only decodes, OnStartContainer is the only notification
   * fired. It is an error to write any more data to the decoder for header-only
   * decodes after SetSize() has been called.
   *
   * If a decoding error occurs, an internal flag is set and an error is
   * returned. Each subsequent call to write will fail immediately
   * for the lifetime of the decoder. Shutdown notifications of the OnStopX
   * variety, as well as DecodingComplete(), are guaranteed not to be called
   * if a decoding error occurs.
   *
   * @param aBuffer buffer containing the data to be written
   * @param aCount the number of bytes to write
   */
  void write(in string aBuffer, in unsigned long count);

};
