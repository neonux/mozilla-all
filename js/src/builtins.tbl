/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=0 ft=C:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
 * June 22, 2008.
 *
 * The Initial Developer of the Original Code is
 *   Andreas Gal <gal@uci.edu>
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * This file declares builtin functions that can be called from JITted code.
 * Each line starts with "BUILTIN" and an integer, the number of arguments the
 * builtin takes.  Builtins with no arguments are not supported.
 *
 * The macro arguments are:
 *
 * - The return type. This identifier must name one of the _JS_TYPEINFO_*
 *   macros defined in jsbuiltins.h.
 *
 * - The builtin name. Prefixed with "js_" this gives the native function name.
 *
 * - The parameter types.
 *
 * - The cse flag. 1 if the builtin call can be optimized away by common
 *   subexpression elimination; otherwise 0. This should be 1 only if the
 *   function is idempotent and the return value is determined solely by the
 *   arguments.
 *
 * - The fold flag. Reserved. The same as cse for now.
 */

/*
 * NB: bool FASTCALL is not compatible with Nanojit's calling convention usage.
 * Do not use bool FASTCALL, use JSBool only!
 */

BUILTIN2(JSVAL,     BoxDouble, CONTEXT, DOUBLE,                                 1, 1)
BUILTIN2(JSVAL,     BoxInt32, CONTEXT, INT32,                                   1, 1)
BUILTIN1(DOUBLE,    UnboxDouble, JSVAL,                                         1, 1)
BUILTIN1(INT32,     UnboxInt32, JSVAL,                                          1, 1)
BUILTIN2(DOUBLE,    dmod, DOUBLE, DOUBLE,                                       1, 1)
BUILTIN2(INT32,     imod, INT32, INT32,                                         1, 1)
BUILTIN1(INT32,     DoubleToInt32, DOUBLE,                                      1, 1)
BUILTIN1(UINT32,    DoubleToUint32, DOUBLE,                                     1, 1)

BUILTIN2(DOUBLE,    StringToNumber, CONTEXT, STRING,                            1, 1)
BUILTIN2(INT32,     StringToInt32, CONTEXT, STRING,                             1, 1)
BUILTIN3(JSVAL,     Any_getprop, CONTEXT, OBJECT, STRING,                       0, 0)
BUILTIN4(BOOL,      Any_setprop, CONTEXT, OBJECT, STRING, JSVAL,                0, 0)
BUILTIN3(JSVAL,     Any_getelem, CONTEXT, OBJECT, UINT32,                       0, 0)
BUILTIN4(BOOL,      Any_setelem, CONTEXT, OBJECT, UINT32, JSVAL,                0, 0)
BUILTIN3(OBJECT,    FastValueToIterator, CONTEXT, UINT32, JSVAL,                0, 0)
BUILTIN2(JSVAL,     FastCallIteratorNext, CONTEXT, OBJECT,                      0, 0)
BUILTIN2(BOOL,      CloseIterator, CONTEXT, JSVAL,                              0, 0)
BUILTIN2(GUARDRECORD, CallTree, INTERPSTATE, FRAGMENT,                          0, 0)
BUILTIN2(OBJECT,    FastNewObject, CONTEXT, OBJECT,                             0, 0)
BUILTIN3(BOOL,      AddProperty, CONTEXT, OBJECT, SCOPEPROP,                    0, 0)
BUILTIN3(BOOL,      HasNamedProperty, CONTEXT, OBJECT, STRING,                  0, 0)
BUILTIN3(JSVAL,     CallGetter, CONTEXT, OBJECT, SCOPEPROP,                     0, 0)
BUILTIN2(STRING,    TypeOfObject, CONTEXT, OBJECT,                              1, 1)
BUILTIN2(STRING,    TypeOfBoolean, CONTEXT, INT32,                              1, 1)
BUILTIN2(DOUBLE,    BooleanToNumber, CONTEXT, INT32,                            1, 1)
BUILTIN2(STRING,    ObjectToString, CONTEXT, OBJECT,                            0, 0)
BUILTIN1(OBJECT,    Arguments, CONTEXT,                                         0, 0)

// soft float
BUILTIN1(DOUBLE,    fneg, DOUBLE,                                               1, 1)
BUILTIN1(DOUBLE,    i2f, INT32,                                                 1, 1)
BUILTIN1(DOUBLE,    u2f, UINT32,                                                1, 1)
BUILTIN2(INT32,     fcmpeq, DOUBLE, DOUBLE,                                     1, 1)
BUILTIN2(INT32,     fcmplt, DOUBLE, DOUBLE,                                     1, 1)
BUILTIN2(INT32,     fcmple, DOUBLE, DOUBLE,                                     1, 1)
BUILTIN2(INT32,     fcmpgt, DOUBLE, DOUBLE,                                     1, 1)
BUILTIN2(INT32,     fcmpge, DOUBLE, DOUBLE,                                     1, 1)
BUILTIN2(DOUBLE,    fmul, DOUBLE, DOUBLE,                                       1, 1)
BUILTIN2(DOUBLE,    fadd, DOUBLE, DOUBLE,                                       1, 1)
BUILTIN2(DOUBLE,    fdiv, DOUBLE, DOUBLE,                                       1, 1)
BUILTIN2(DOUBLE,    fsub, DOUBLE, DOUBLE,                                       1, 1)
