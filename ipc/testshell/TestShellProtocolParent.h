//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef mozilla_ipc_TestShellProtocolParent_h
#define mozilla_ipc_TestShellProtocolParent_h

#include "mozilla/ipc/TestShellProtocol.h"
#include "mozilla/ipc/RPCChannel.h"

namespace mozilla {
namespace ipc {


class /*NS_ABSTRACT_CLASS*/ TestShellProtocolParent :
    public mozilla::ipc::RPCChannel::Listener
{
protected:
    typedef mozilla::ipc::String String;
    typedef mozilla::ipc::StringArray StringArray;


private:
    typedef IPC::Message Message;
    typedef mozilla::ipc::RPCChannel Channel;

public:
    TestShellProtocolParent() :
        mChannel(this)
    {
    }

    virtual ~TestShellProtocolParent()
    {
    }

    bool Open(
                IPC::Channel* aChannel,
                MessageLoop* aThread = 0)
    {
        return mChannel.Open(aChannel, aThread);
    }

    void Close()
    {
        mChannel.Close();
    }

    nsresult CallSendCommand(const String& aCommand)
    {
        Message __reply;
        Message* __msg;
        __msg = new TestShellProtocol::Msg_SendCommand(aCommand);
        __msg->set_routing_id(MSG_ROUTING_CONTROL);
        if (!(mChannel.Call(__msg, &(__reply)))) {
            return NS_ERROR_FAILURE;
        }
        if (!(TestShellProtocol::Reply_SendCommand::Read(&(__reply)))) {
            return NS_ERROR_ILLEGAL_VALUE;
        }
        return NS_OK;
    }

    virtual Result OnMessageReceived(const Message& msg)
    {
        switch (msg.type()) {
        default:
            {
                return MsgNotKnown;
            }
        }
    }

    virtual Result OnMessageReceived(
                const Message& msg,
                Message*& reply)
    {
        switch (msg.type()) {
        default:
            {
                return MsgNotKnown;
            }
        }
    }

    virtual Result OnCallReceived(
                const Message& msg,
                Message*& reply)
    {
        switch (msg.type()) {
        default:
            {
                return MsgNotKnown;
            }
        }
    }

private:
    Channel mChannel;
    int mId;
    int mPeerId;
    mozilla::ipc::IProtocolManager* mManager;
};


} // namespace ipc
} // namespace mozilla
#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
class ActorImpl :
    public TestShellProtocolParent
{
    ActorImpl();
    virtual ~ActorImpl();
};


// C++ file contents
ActorImpl::ActorImpl()
{
}

ActorImpl::~ActorImpl()
{
}

#endif // if 0

#endif // ifndef mozilla_ipc_TestShellProtocolParent_h
