/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla IPDL Test Harness.
 *
 * The Initial Developer of the Original Code is
 *   Chris Jones <jones.chris.g@gmail.com>.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

//-----------------------------------------------------------------------------
// "Hello world" example
namespace mozilla {
namespace test {

protocol PTest
{
child:
    Hello();

parent:
    World();
};

} // namespace test
} // namespace mozilla

//-----------------------------------------------------------------------------
// Example solution to exercise
 /*
include "nsTArray.h";
using nsTArray<nsCString>;

namespace mozilla {
namespace test {
 
sync protocol PTest
{
both:
    Ping();
    Pong(int status);

parent:
    GetValue(nsCString key);
    GetValues(nsTArray<nsCString> keys);
    sync SetValue(nsCString key, nsCString val) returns (bool ok);

child:
    TellValue(nsCString key, nsCString val);
    TellValues(nsTArray<nsCString> keys, nsTArray<nsCString> vals);

state START:
    send Ping goto START;
    recv Pong goto START;

    recv SetValue goto HAVE_VALUES;

state HAVE_VALUES:
    send Ping goto HAVE_VALUES;
    recv Pong goto HAVE_VALUES;

    recv SetValue goto HAVE_VALUES;

    recv GetValue goto TELLING_VALUE;
    recv GetValues goto TELLING_VALUES;

state TELLING_VALUE:
    send Ping goto TELLING_VALUE;
    recv Pong goto TELLING_VALUE;

    send TellValue goto HAVE_VALUES;

state TELLING_VALUES:
    send Ping goto TELLING_VALUES;
    recv Pong goto TELLING_VALUES;

    send TellValues goto HAVE_VALUES;
};

} // namespace test
} // namespace mozilla
*/
